#!/bin/python

import pygame
import subprocess
import os
import json


class Monitor(object):
    # xrandr_out = HDMI-1 connected 3440x1440+0+0 (normal left inverted right x axis y axis) 798mm x 335mm
    def __init__(self, xrandr_out):
        # print(xrandr_out)
        words = xrandr_out.split(' ')
        self.cable = words[0]
        self.active = True if words[1] == 'connected' else False
        if 'primary' in words:
            words.remove('primary')
        self.width = int(words[2].split('x')[0])
        self.height = int(words[2].split('x')[1].split('+')[0])
        self.x = int(words[2].split('+')[1])
        self.y = int(words[2].split('+')[2])
        self.orientation = xrandr_out.split('(')[1].split(')')[0]
        self.real_width = words[-3]
        self.real_height = words[-1]
        self.rotation = 0  # times 90 degrees
        if self.width < self.height:
            self.rotation = 1
            self.height, self.width = self.width, self.height
        self.fliph = 0
        self.flipv = 0

    def __str__(self):
        string = 'Connection:      ' + self.cable + '\n'
        string += 'Dimensions       ' + str(self.width) + 'x' + str(self.height) + '\n'
        string += 'Position:        ' + str(self.x) + '+' + str(self.y) + '\n'
        string += 'Orientation:     ' + self.orientation + '\n'
        string += 'Real dimensions: ' + self.real_width + ' x ' + self.real_height
        return string


def draw_text(surface, text, font, start, margin):
    x = y = margin // 2
    i = 0
    max_width = 0
    for sentence in text:
        label = font.render(sentence, 1, fg)
        surface.blit(label, (x+start[0], y+start[1] + i*linespace))
        i += 1
        max_width = max(max_width, label.get_width())
    end_y = y + i*linespace + y//2 + start[1]
    return end_y, max_width


def options(monitors, grid, num):
    option = []
    for mon_num, (x, y) in grid.items():
        if mon_num != num and x != -1 and y != -1:
            # we found ourselves a new monitor
            mw, mh = monitors[mon_num].width, monitors[mon_num].height
            if monitors[mon_num].rotation % 2 == 1:
                mh, mw = mw, mh
            ml = monitors[mon_num].x
            mr = monitors[mon_num].x + mw
            md = monitors[mon_num].y
            mu = monitors[mon_num].y + mh
            mx = (ml + mr) // 2
            my = (md + mu) // 2
            # all options are: (c for current, m for monitor)
            # ml = cl, mu = cd
            # mr = cr, mu = cd
            # ml = cl, md = cu
            # mr = cr, md = cu
            # mu = cu, ml = cr
            # md = cd, ml = cr
            # mu = cu, mr = cl
            # md = cd, mr = cl
            # my = cy, ml = cr
            # my = cy, mr = cl
            # mx = cx, mu = cd
            # mx = cx, md = cu
            # We need to get (cl, cd) to get the position (x, y) equals each other
            # cr = w + cl
            # cu = h + cd
            # cx = w/2 + cl
            # cy = h/2 + cd
            h = monitors[num].height
            w = monitors[num].width
            if monitors[num].rotation % 2 == 1:
                h, w = w, h
            option += [(ml, mu), (mr-w, mu), (ml, md-h), (mr-w, md-h)]
            option += [(ml-w, mu-h), (ml-w, md), (mr, mu-h), (mr, md)]
            option += [(ml-w, my-h//2), (mr, my-h//2), (mx-w//2, mu), (mx-w//2, md-h)]
    else:
        h = monitors[mon_num].height
        w = monitors[mon_num].width
        if monitors[mon_num].rotation % 2 == 1:
            h, w = w, h
        if option == []:
            option = [(0, -h)]

    for mon_num, (x, y) in grid.items():
        if mon_num != num and x != -1 and y != -1:
            mw, mh = monitors[mon_num].width, monitors[mon_num].height
            if monitors[mon_num].rotation % 2 == 1:
                mh, mw = mw, mh
            for (a, b) in option[:]:
                if ((x <= a < x+mw or x < a+w <= x+mw) and
                        (y <= b < y+mh or y < b+h <= y+mh)):
                    option.remove((a, b))

    while grid[num] in option:
        option.remove(grid[num])

    return sorted(set(option))


def draw_window(surface, monitors, mode, data, grid, px):
    # background
    surface.fill(bg)
    px_to_screen = px

    widest = max(i.width for i in monitors)
    # Bottom left, to show all the monitors
    x, y = 10, 10
    cur_x, cur_y = x//2, y//2
    rect = (cur_x, cur_y, widest//px_to_screen + x, height - cur_y - y//2)
    pygame.draw.rect(surface, fg, rect, 3)
    # Loop through the monitors to display them
    color = (100, 100, 100)
    sum_h = cur_y + y//2
    i = 1
    for mon in monitors:
        # Monitor itself
        place = (x + (widest - mon.width)//px_to_screen//2, sum_h,
                 mon.width//px_to_screen, mon.height//px_to_screen)
        sub = pygame.Surface.subsurface(win, place)
        pygame.draw.rect(sub, color, (0, 0, place[2], place[3]), 0)
        # Number
        label = font2.render(str(i), 1, fg)
        mid_x = (place[2] - label.get_width()) // 2
        mid_y = (place[3] - label.get_height()) // 2
        sub.blit(label, (mid_x, mid_y))
        # Info under screen
        text = ['Connection = ' + mon.cable,
                'Position X = ' + str(mon.x),
                'Position_Y = ' + str(mon.y),
                'Dimensions = ' + str(mon.width) + 'x' + str(mon.height),
                'rotate,flip= ' + str(mon.rotation*90) + 'deg ' +
                                  str(mon.fliph) + 'h' +
                                  str(mon.flipv) + 'v']
        start = (x, place[1] + place[3])
        end_y, max_width = draw_text(surface, text, font1, start, 10)
        # Line under info
        pygame.draw.line(surface, fg, (cur_x, end_y), (cur_x + rect[2]-1, end_y), 3)
        # Rest of the loop
        i += 1
        sum_h = end_y + 10

    # Top Right, this is the legend
    text = ['m: move monitor *** to spot ***',
            'r: reset monitor ***',
            'o: orient mode',
            'c: get xrandr command',
            'q: quit the program',
            'Hit letter to continue']
    show_options = False
    if data['enter']:
        text = ['Moving monitor *** to spot ***']
    elif data['mon'] != -1:
        text = ['Moving monitor ' + str(data['mon']+1) + ' to spot ***']
        show_options = True
    elif mode['info']:
        text = ['Sending notification to monitor ***']
    elif mode['delete']:
        text = ['Reset monitor ***']
    elif mode['command']:
        text = [data['command'],
                's: save and run command',
                'r: run command']
    elif mode['orient']:
        if data['key'] == -1:
            text = ['r: rotate monitor ***',
                    # 'v: flip monitor *** vertical',
                    # 'h: flip monitor *** horizontal',
                    'Hit number to continue, e or ESCAPE to exit']
        else:
            text = ['r: rotate monitor ' + str(data['key']+1)]
                    # 'v: flip monitor ' + str(data['key']+1) + ' vertical',
                    # 'h: flip monitor ' + str(data['key']+1) + ' horizontal']
    h, w = draw_text(surface, text, font0, (rect[2], 0), 20)

    # Top Right, to show the mode
    name = ', '.join(k for k, v in mode.items() if v and v != -1)
    name = 'NO' if name == '' else name.upper()
    mode_str = 'you are in ' + name + ' mode'
    label4 = font0.render(mode_str, 1, fg)
    surface.blit(label4, (rect[2] + x, h+y))
    start = (rect[2] + x//2, h + y + y//2 + label4.get_height())
    end = (width, h + y + y//2 + label4.get_height())
    pygame.draw.line(surface, fg, start, end, 3)

    # Bottom Right
    # The axes
    axis_y = 1*(height + end[1])//2
    axis_x = 1*(width-width_bl)//3 + width_bl
    pygame.draw.line(surface, fg, (axis_x, end[1]), (axis_x, height), 1)
    start = (widest//px_to_screen + x + x//2, axis_y)
    pygame.draw.line(surface, fg, start, (width, axis_y), 1)
    x0, y0 = axis_x, axis_y
    if show_options:
        w, h = monitors[data['mon']].width, monitors[data['mon']].height
        if monitors[data['mon']].rotation % 2 == 1:
            h, w = w, h

        for index, (x, y) in enumerate(options(monitors, grid, data['mon'])):
            x //= px_to_screen
            y //= -px_to_screen
            r = (x0+x, y0+y - h//px_to_screen, w//px_to_screen, h//px_to_screen)
            pygame.draw.rect(surface, fg, r, 1)
            # pygame.draw.line(surface, fg, (r[0], r[1]+r[3]), (r[0]+r[2], r[1]), 1)
            pygame.draw.line(surface, fg, (r[0], r[1]), (r[0]+r[2], r[1]+r[3]), 1)
            if index+1 >= 10:
                index -= 9
                index += 97
                index = chr(index)
                label4 = font2.render(index, 1, fg)
            else:
                label4 = font2.render(str(index+1), 1, fg)
            surface.blit(label4, (r[0]+(r[2]-label4.get_width())//2, r[1]+r[3]//2))

    if data['spot'] != -1:
        print(grid)

    # draw grid
    color = (100, 10, 10)
    for num, (x, y) in grid.items():
        if x == y == -1:
            continue
        x //= px_to_screen
        y //= -px_to_screen
        w, h = monitors[num].width, monitors[num].height
        if monitors[num].rotation % 2 == 1:
            h, w = w, h
        r = (x0+x, y0+y - h//px_to_screen, w//px_to_screen, h//px_to_screen)
        pygame.draw.rect(surface, color, r, 2)
        # label4 = font2.render(str(num+1) + ':' + monitors[num].cable, 1, fg)
        label4 = font2.render(monitors[num].cable, 1, fg)
        label4 = pygame.transform.rotate(label4, monitors[num].rotation*90)
        label4 = pygame.transform.flip(label4, monitors[num].fliph, monitors[num].flipv)
        wid, hei = label4.get_width(), label4.get_height()
        if monitors[num].rotation % 2 == 0:
            surface.blit(label4, (r[0]+(r[2]-wid)//2, r[1]+(r[3]-hei)//2))
        else:
            surface.blit(label4, (r[0]+(r[2]-wid)//2, y0+y-(r[3]+hei)//2))


def info(mon, num):
    os.system('killall dunst')
    subprocess.Popen(['dunst', '-monitor', str(num),
                      '-geometry', 'x100-0+0', '-transparency', '0'])
    os.system('notify-send "CURRENT SETUP" "' + str(mon) + '" -t 0 -u critical')


def main(win):
    # Get the monitors
    # Set up all connected monitors in their preferred mode
    os.system('xrandr --auto')
    monitors = subprocess.check_output('xrandr --prop | grep -w connected', shell=True)
    monitors = monitors.decode('utf-8').split('\n')[:-1]
    # monitors = ['DP-1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 798mm x 335mm',
    #             'DP-2 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 798mm x 335mm',
    #             'DP-3 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 798mm x 335mm',
    #             'HDMI-1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 798mm x 335mm']
    output = monitors[:]


    # xrandr_out = HDMI-1 connected 3440x1440+0+0 (normal left inverted right x axis y axis) 798mm x 335mm
    monitors = [Monitor(i) for i in monitors]

    widest = max(i.width for i in monitors)
    heights = sum(i.height for i in monitors)
    px = widest // width_bl
    margin = 10
    px = max(px, heights//(height-(linespace*5+2*margin)*len(monitors)))

    # Show info on the main monitor
    info(monitors[0], 0)

    # Start the program
    # cur = monitors[0]
    mode = {'move': False, 'delete': False,
            'orient': False, 'info': False, 'command': False}
    data = {'enter': False, 'firstkey': False, 'mon': -1, 'spot': -1, 'key': -1, 'command': ''}
    grid = {}
    for index, mon in enumerate(monitors):
        grid[index] = (-1, -1)
    res_data = data.copy()
    while True:
        # If a key gets pressed (or the game is quit)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.display.quit()
                os.system('killall dunst')
                break

            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_q:
                    pygame.display.quit()
                    os.system('killall dunst')
                    break
                elif event.key == pygame.K_m and sum(mode.values()) == 0:
                    # Move monitor *** to spot ***
                    mode['move'] = True
                    data['enter'] = True
                elif event.key == pygame.K_r and sum(mode.values()) == 0:
                    # ?!!?
                    mode['delete'] = True
                elif event.key == pygame.K_i and sum(mode.values()) == 0:
                    # info of monitor ***
                    mode['info'] = True
                elif event.key == pygame.K_o and sum(mode.values()) == 0:
                    # change the orientation of monitor ***
                    mode['orient'] = True
                elif event.key == pygame.K_c and sum(mode.values()) == 0:
                    # get the xrandr command
                    mode['command'] = True
                elif event.key == pygame.K_e or event.key == pygame.K_ESCAPE:
                    # exit all modes
                    for k, v in mode.items():
                        mode[k] = False
                    data = res_data.copy()

                if mode['move']:
                    if 49 <= event.key <= 57 and len(monitors) > event.key % 49:
                        data['enter'] = False
                    if 49 <= event.key <= 57 and not data['firstkey'] and len(monitors) > event.key % 49:
                        data['firstkey'] = True
                        data['mon'] = event.key % 49
                    elif data['firstkey']:
                        if 49 <= event.key <= 57:
                            data['spot'] = event.key % 49
                        else:
                            data['spot'] = event.key % 97 + 9
                        grid[data['mon']] = options(monitors, grid, data['mon'])[data['spot']]
                        monitors[data['mon']].x = grid[data['mon']][0]
                        monitors[data['mon']].y = grid[data['mon']][1]
                        data['mon'] = -1
                        data['firstkey'] = False
                        mode['move'] = False
                if mode['delete']:
                    if 49 <= event.key <= 57 and len(monitors) > event.key % 49:
                        mon = event.key % 49
                        grid[mon] = (-1, -1)
                        monitors[mon].rotation = 0
                        monitors[mon].flipv = 0
                        monitors[mon].fliph = 0
                if mode['info']:
                    print('We ARE IN info MODE')
                    if 49 <= event.key <= 57 and len(monitors) > event.key % 49:
                        info(monitors[event.key % 49], event.key % 49)
                        mode['info'] = False
                if mode['orient']:
                    if 49 <= event.key <= 57 and len(monitors) > event.key % 49:
                        data['key'] = event.key % 49
                    else:
                        if chr(event.key) == 'r':
                            monitors[data['key']].rotation += 1
                            monitors[data['key']].rotation %= 4
                        # elif chr(event.key) == 'v':
                            # monitors[data['key']].flipv = 1-monitors[data['key']].flipv
                        # elif chr(event.key) == 'h':
                            # monitors[data['key']].fliph = 1-monitors[data['key']].fliph
                if mode['command']:
                    translation = [0, 0]
                    for i in monitors:
                        w = i.width
                        h = i.height
                        if i.rotation % 2 == 1:
                            h, w = w, h
                        if i.x < translation[0]:
                            translation[0] = i.x
                        if -i.y-h < translation[1]:
                            translation[1] = -i.y-h
                    string = 'xrandr'
                    for index, monitor in enumerate(monitors):
                        if grid[index] == (-1, -1):
                            continue
                        string += ' --output ' + monitor.cable
                        h = monitor.height
                        w = monitor.width
                        string += ' --mode ' + str(w) + 'x' + str(h)
                        if monitor.rotation % 2 == 1:
                            h, w = w, h
                        string += ' --pos ' + str(monitor.x-translation[0]) + \
                                        'x' + str(-(monitor.y+translation[1]+h))
                        opt = ['normal', 'left', 'inverted', 'right']
                        string += ' --rotate ' + opt[monitor.rotation]
                        if monitor.width / int(monitor.real_width.split('m')[0]) > 7:
                            string += ' --dpi 130dpi'
                        else:
                            string += ' --auto'
                    data['command'] = string
                    if event.key == pygame.K_s:
                        #### SAVE
                        cache = os.popen('echo "$XDG_CACHE_HOME"').read()[:-1]
                        exist = os.popen('ls "$XDG_CACHE_HOME"').read()
                        if 'screens.json' in exist:
                            file1 = open(cache + '/screens.json', 'r')
                            text = file1.read()
                            file1.close()
                            if text == '':
                                dct = {}
                            else:
                                dct = json.loads(text)
                        else:
                            dct = {}
                        print(dct)
                        new_dct = {}
                        for k, v in dct.items():
                            if k == 'main':
                                new_dct[1] = v
                            else:
                                new_dct[int(k)+1] = v
                        new_dct['main'] = {}
                        # We do not want to give position to output
                        output2 = []
                        for line in output:
                            output2.append(line[:line.index('+')] + line[line.index('('):])
                        new_dct['main']['output'] = output2
                        new_dct['main']['command'] = string
                        for k, v in new_dct.copy().items():
                            if v == new_dct['main'] and k != 'main':
                                new_dct.pop(k)
                        json.dump(new_dct, open(cache + '/screens.json', 'w'))
                        os.system(string)
                        mode['command'] = False
                    elif event.key == pygame.K_r:
                        # run
                        os.system(string)
                        mode['command'] = False

            draw_window(win, monitors, mode, data, grid, px)
            pygame.display.update()


# Set dimensions of window
width = 1200
height = 900
width_bl = 300  # width bottom left

# Make window
pygame.font.init()
win = pygame.display.set_mode((width, height))
pygame.display.set_caption('Monitor Setup Program')
pygame.font.init()
font0 = pygame.font.SysFont('monospace', 20)
font1 = pygame.font.SysFont('monospace', 15)
font2 = pygame.font.SysFont('monospace', 40)
linespace = 20

# Colors
bg = (34, 34, 34)
fg = (200, 200, 200)
# Start program
main(win)
