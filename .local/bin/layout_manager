#!/bin/sh

echo "This script was not finished and is now deprecated. Exiting..."
exit 1

# to do: check if opt in local/bin

printhelp () {
cat << EOF
Optional arguments for custom use:

-h      Display this message
-m      Supply a mode, <int>: 1:load, 2:save
-n      Supply a filename to save to or load from
-w      Supply semicolon seperated numbers for workspaces
            "current" and "all" (default) are also valid arguments

EOF

exit 1
}

workspaces='all'
while getopts ":hm:n:w:" opt; do
    case $opt in
        h) printhelp ;;
        m) mode=${OPTARG} ;;
        n) name=${OPTARG} ;;
        w) workspaces=${OPTARG} ;;
    esac
done

dependency () {
    for arg in "$@"; do
        if [ -z $(whereis -b $arg | awk '{print $2}') ]; then
            echo "Dependency $arg not installed"
            echo "Install to run please"
            exit 1
        fi
    done
}

dependency jq xprop xdotool rofi

layout_folder=$(pwd $0)

# check if defined
if [ -z ${mode+x} ]; then
    mode=$(opt -o "Load layout;Save layout" -q "Layout" -d "Please select an option")
fi

if ((mode < 1 | mode > 2)); then
    echo 'No command chosen'
    exit 1
fi


# search for workspaces
current=$(i3-msg -t get_workspaces | jq '.[] | select(.focused==true).num' | cut -d"\"" -f2)
if [ $workspaces = "current" ]; then
    w_ids=$current
elif [ $workspaces = "all" ]; then
    w_ids="$(i3-msg -t get_workspaces | jq '.[] | .num' | cut -d"\"" -f2)"
else
    w_ids="$(echo $workspaces | tr ";" "\n")"
fi


# load or save layout
if ((mode == 1)); then
    # choose filename
    filenum=$(opt -o $(ls -1dt $layout_folder/*/ | rev | cut -d"/" -f2 | rev))
    filepath=$(ls -1dt $layout_folder/*/ | sed "$filenum q;d")

    echo "$w_ids" | while read w_id; do
        # check if there is a file with the w_id
        if [[ "$(ls $filepath)" != *"$w_id"* ]]; then
            echo "We do not have a layout saved for workspace $w_id"
            continue
        fi
        echo "doing workspace $w_id"

        # Even though we have the workspace id's xdotool works only
        # with the active one, we use xprop to get the index of the workspace
        # where the index is the number of previous active workspaces.
        id=$(xprop -notype -root _NET_DESKTOP_NAMES | cut -d"=" -f2 | tr "," "\n" | cut -d"\"" -f2 | grep -xn $w_id | cut -d":" -f1)

        windows=$(xdotool search --all --name --desktop $((id-1)) "")
        active=()
        for window in $windows; do
            pid=$(xdotool getwindowpid $window | grep "has no pid" | wc -l)
            if [ $pid -eq 0 ]; then
                # current window has no process id
                xdotool windowclose $window
            else
                active+=($window)
                xdotool windowunmap $window
            fi
        done

        # applying the layout
        i3-msg "workspace $w_id; append_layout ${filepath}ws$w_id.json"

        for window in ${active[@]}; do
            xdotool windowmap $window
        done

        i3-msg "workspace $current"
    done
elif ((mode == 2)); then
    # save layout
    filepath="$layout_folder/name"
    mkdir -p $filepath

    echo "$w_ids" | while read w_id; do
        echo "doing workspace $w_id"
        # filter out top lines, comment title and delete last comma after instance line
        i3-save-tree --workspace=$w_id | tail -n +2 | fgrep -v '// split' | sed '/title/!s/\/\///g' | sed '/instance/s/,$//' > "${filepath}/ws$w_id.json"
        # alacritty --working-directory "/home/joris/.config/polybar" --hold -e zsh -c "sleep 1; nvim /home/joris/.config/polybar/config; zsh"
    done
fi
